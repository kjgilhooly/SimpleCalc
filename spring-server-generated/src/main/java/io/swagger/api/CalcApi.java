/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.math.BigDecimal;
import io.swagger.model.SimpleCalcRequest;
import io.swagger.model.SimpleCalcResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-29T16:21:35.931Z[GMT]")
public interface CalcApi {

    @Operation(summary = "process two numbers", description = "", tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "return results", content = @Content(schema = @Schema(implementation = SimpleCalcResponse.class))) })
    @RequestMapping(value = "/calc",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SimpleCalcResponse> calcGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "operation" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "function", required = true) String function, @NotNull @Parameter(in = ParameterIn.QUERY, description = "one operator" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "opX", required = true) BigDecimal opX, @NotNull @Parameter(in = ParameterIn.QUERY, description = "other operator" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "opY", required = true) BigDecimal opY);


    @Operation(summary = "adds two numbers", description = "", tags={ "users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "return results", content = @Content(schema = @Schema(implementation = SimpleCalcResponse.class))) })
    @RequestMapping(value = "/calc",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SimpleCalcResponse> calcPost(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SimpleCalcRequest body);

}

